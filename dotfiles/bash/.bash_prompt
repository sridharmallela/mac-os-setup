#!/bin/bash
# -------------------------------------------------------------------------------------------------------------
# The aim of this theme is to only show you *relevant* information. Like most prompts, it will only show git
# information when in a git working directory. However, it goes a step further: everything from the current user
# and hostname to whether the last call exited with an error to whether background jobs are running in this shell
# will all be displayed automatically when appropriate.
# note: requires bash v4+... Mac users - you often have bash3. 'brew install bash' will set you free
# -------------------------------------------------------------------------------------------------------------
PROMPT_DIRTRIM=2
# for debugging comment this or set it to 1
PROMPT_DEBUG=0
debug() {
	if [[ ${PROMPT_DEBUG} -ne 0 ]]; then
		echo >&2 -e $*
	fi
}
# A few utility functions to make it easy and re-usable to draw segmented prompts
CURRENT_BG='NONE'
CURRENT_RBG='NONE'
SEGMENT_SEPARATOR=''
RIGHT_SEPARATOR=''
LEFT_SUBSEG=''
RIGHT_SUBSEG=''
text_effect() {
	case "$1" in
	reset) echo 0 ;;
	bold) echo 1 ;;
	underline) echo 4 ;;
	esac
}
fg_color() {
	case "$1" in
	black) echo 30 ;;
	red) echo 31 ;;
	green) echo 32 ;;
	yellow) echo 33 ;;
	blue) echo 34 ;;
	magenta) echo 35 ;;
	cyan) echo 36 ;;
	white) echo 37 ;;
	orange) echo 38\;5\;166 ;;
	esac
}
bg_color() {
	case "$1" in
	black) echo 40 ;;
	red) echo 41 ;;
	green) echo 42 ;;
	yellow) echo 43 ;;
	blue) echo 44 ;;
	magenta) echo 45 ;;
	cyan) echo 46 ;;
	white) echo 47 ;;
	orange) echo 48\;5\;166 ;;
	esac
}
ansi() {
	local seq
	declare -a mycodes=("${!1}")
	debug "ansi: ${!1} all: $* aka ${mycodes[@]}"
	seq=""
	for ((i = 0; i < ${#mycodes[@]}; i++)); do
		if [[ -n $seq ]]; then
			seq="${seq};"
		fi
		seq="${seq}${mycodes[$i]}"
	done
	debug "ansi debug:" '\\[\\033['${seq}'m\\]'
	echo -ne '\[\033['${seq}'m\]'
}
ansi_single() {
	echo -ne '\[\033['$1'm\]'
}
# Takes two arguments, background and foreground. Both can be omitted, rendering default background/foreground.
prompt_segment() {
	local bg fg
	declare -a codes
	debug "Prompting $1 $2 $3"
	codes=("${codes[@]}" $(text_effect reset))
	if [[ -n $1 ]]; then
		bg=$(bg_color $1)
		codes=("${codes[@]}" $bg)
		debug "Added $bg as background to codes"
	fi
	if [[ -n $2 ]]; then
		fg=$(fg_color $2)
		codes=("${codes[@]}" $fg)
		debug "Added $fg as foreground to codes"
	fi
	debug "Codes: "
	if [[ $CURRENT_BG != NONE && $1 != $CURRENT_BG ]]; then
		declare -a intermediate=($(fg_color $CURRENT_BG) $(bg_color $1))
		debug "pre prompt " $(ansi intermediate[@])
		PR="$PR $(ansi intermediate[@])$SEGMENT_SEPARATOR"
		debug "post prompt " $(ansi codes[@])
		PR="$PR$(ansi codes[@]) "
	else
		debug "no current BG, codes is $codes[@]"
		PR="$PR$(ansi codes[@]) "
	fi
	CURRENT_BG=$1
	[[ -n $3 ]] && PR="$PR$3"
}
# End the prompt, closing any open segments
prompt_end() {
	if [[ -n $CURRENT_BG ]]; then
		declare -a codes=($(text_effect reset) $(fg_color $CURRENT_BG))
		PR="$PR $(ansi codes[@])$SEGMENT_SEPARATOR"
	fi
	declare -a reset=($(text_effect reset))
	PR="$PR $(ansi reset[@])"
	CURRENT_BG=''
}
# virtualenv prompt
prompt_virtualenv() {
	if [[ -n $VIRTUAL_ENV ]]; then
		color=cyan
		prompt_segment $color $PRIMARY_FG
		prompt_segment $color white "$(basename $VIRTUAL_ENV)"
	fi
}
# Each component will draw itself, and hide itself if no information needs to be shown
# Context: user@hostname (who am I and where am I)
prompt_context() {
	local user=$(whoami)
	if [[ $user != $DEFAULT_USER || -n $SSH_CLIENT ]]; then
		# changing to get rid of hostname
		# prompt_segment black default "$user@\h"
		prompt_segment orange default "$user $(ansi_single $(fg_color black))"
	fi
}
# prints history followed by HH:MM, useful for remembering what we did previously
prompt_histdt() {
	prompt_segment black default "\! [\A]"
}
git_status_dirty() {
	dirty=$(git status -s 2>/dev/null | tail -n 1)
	[[ -n $dirty ]] && echo " ●"
}
# Git: branch/detached head, dirty status
prompt_git() {
	local ref dirty
	if $(git rev-parse --is-inside-work-tree >/dev/null 2>&1); then
		ZSH_THEME_GIT_PROMPT_DIRTY='±'
		dirty=$(git_status_dirty)
		ref=$(git symbolic-ref HEAD 2>/dev/null) || ref="➦ $(git show-ref --head -s --abbrev | head -n1 2>/dev/null)"
		if [[ -n $dirty ]]; then
			prompt_segment yellow black
		else
			prompt_segment green black
		fi
		PR="$PR${ref/refs\/heads\// }$dirty"
	fi
}
# Dir: current working directory
prompt_dir() {
	prompt_segment blue black '\w'
}
# Status:
# - was there an error
# - am I root
# - are there background jobs?
prompt_status() {
	local symbols
	symbols=()
	# [[ $RETVAL -eq 0 ]] && symbols+="$(ansi_single $(fg_color green))✔🔥"
	[[ $RETVAL -eq 0 ]] && symbols+="$(ansi_single $(fg_color green))✔"
	# [[ $RETVAL -eq 0 ]] && symbols+="$(ansi_single $(fg_color green))"
	[[ $RETVAL -ne 0 ]] && symbols+="$(ansi_single $(fg_color red))✘"
	[[ $UID -eq 0 ]] && symbols+="$(ansi_single $(fg_color yellow))⚡"
	[[ $(jobs -l | wc -l) -gt 0 ]] && symbols+="$(ansi_single $(fg_color cyan))⚙"
	[[ -n "$symbols" ]] && prompt_segment black default "$symbols"
}
prompt_emacsdir() {
	PR="DIR \w DIR$PR"
}
## Main prompt
build_prompt() {
	[[ ! -z ${AG_EMACS_DIR+x} ]] && prompt_emacsdir
	prompt_status
	#[[ -z ${AG_NO_HIST+x} ]] && prompt_histdt
	[[ -z ${AG_NO_CONTEXT+x} ]] && prompt_context
	prompt_virtualenv
	prompt_dir
	prompt_git
	prompt_end
}
set_bash_prompt() {
	RETVAL=$?
	PR=""
	PRIGHT=""
	CURRENT_BG=NONE
	PR="$(ansi_single $(text_effect reset))"
	build_prompt
	PS1=$PR
}
PROMPT_COMMAND=set_bash_prompt